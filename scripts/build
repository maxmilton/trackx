#!/bin/bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
tmp_dir=$(mktemp -d 2>/dev/null || mktemp -d -t 'trackx')

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [--no-docker] [--no-git]

Perform a full TrackX production build in preparation for deployment.

Available options:

-h, --help       Print this help and exit
-v, --verbose    Print script debug info
    --no-docker  Disable Docker operations
    --no-git     Disable Git operations
-s  --skip-tests Skip running tests
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  rm -rf "$tmp_dir"
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  # default values of variables set from params
  nodocker=0
  nogit=0
  skip_tests=0

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    --no-docker) nodocker=1 ;;
    --no-git) nogit=1 ;;
    -s | --skip-tests) skip_tests=1 ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  [[ ${#args[@]} -eq 0 ]] || die "Unexpected script arguments"

  return 0
}

parse_params "$@"
setup_colors

check_dependencies() {
  if [[ "${nodocker}" -eq 0 ]]; then
    hash docker 2>/dev/null || die "Docker is required but not installed. Aborting.\nSee https://docs.docker.com/get-docker/"
    hash docker-compose 2>/dev/null || die "Docker compose is required but not installed. Aborting.\nSee https://docs.docker.com/compose/install/"
  fi
  hash node 2>/dev/null || die "Node.js is required but not installed. Aborting.\nSee https://nodejs.org/en/download/"
  hash pnpm 2>/dev/null || die "pnpm is required but not installed. Aborting.\nSee https://pnpm.io/installation"

  # TODO: Check node version is new enough
  # TODO: Check pnpm version is new enough

  if [[ "${nogit}" -eq 0 ]]; then
    hash git 2>/dev/null || die "Git is required but not installed. Aborting. Use --no-git to skip this check."
    test -z "$(git status --porcelain)" || die "Uncommitted changes found. Aborting. Use --no-git to skip this check."
  fi

  if [[ "${nodocker}" -eq 0 ]]; then
    test -f "$script_dir/../docker-compose.yml" || die "docker-compose.yml not found. Aborting."
  fi
}

pre_build() {
  rm -f "${script_dir}/../trackx.tar.gz"
}

build() {
  msg "Installing dependencies..."
  pnpm install --dir "$script_dir/.."

  msg "Building packages..."
  pnpm run --dir "$script_dir/.." build

  cp "${script_dir}/../packages/trackx-cli/dist/"* "${script_dir}/../packages/trackx-api/dist/"

  if [[ "${skip_tests}" -eq 0 ]]; then
    msg "Linting..."
    pnpm run --dir "$script_dir/.." lint:css -- --quiet
    pnpm run --dir "$script_dir/.." lint:js -- --quiet
    pnpm run --dir "$script_dir/.." lint:ts

    msg "Running tests..."
    pnpm exec jest
  fi

  # TODO: Ideally we would build locally and then push to the remote
  # TODO: Remove? When using DOCKER_HOST the image is built on the remote host
  # if [[ "${nodocker}" -eq 0 ]]; then
  #   msg "Building Docker images..."
  #   docker-compose --file "$script_dir/../docker-compose.yml" build --pull --no-cache
  # fi
}

pack() {
  msg "Packing..."

  mkdir -p \
    "${tmp_dir}/bin" \
    "${tmp_dir}/etc/nginx/certs" \
    "${tmp_dir}/var/dash" \
    "${tmp_dir}/var/db"

  cp "${script_dir}/sqlite" "${tmp_dir}/bin/"
  cp "${script_dir}/trackx" "${tmp_dir}/bin/"

  cp "${script_dir}/../packages/trackx-api/trackx.config.js.template" "${tmp_dir}/etc/"
  cp "${script_dir}/../packages/trackx-api/migrations/master.sql" "${tmp_dir}/var/db/"

  test -f "${script_dir}/../packages/trackx-api/libsqlite_zstd.so" \
    && cp "${script_dir}/../packages/trackx-api/libsqlite_zstd.so" "${tmp_dir}/var/db/"

  cp -r "${script_dir}/../packages/trackx-api/nginx/conf" "${tmp_dir}/etc/nginx/"
  cp -r "${script_dir}/../packages/trackx-api/nginx/conf.d" "${tmp_dir}/etc/nginx/"
  cp "${script_dir}/../packages/trackx-api/nginx/mime.types" "${tmp_dir}/etc/nginx/"
  cp "${script_dir}/../packages/trackx-api/nginx/nginx.conf" "${tmp_dir}/etc/nginx/"

  cp -r "${script_dir}/../packages/trackx-dash/dist/"* "${tmp_dir}/var/dash/"

  msg "Creating archive file..."
  tar -czf "${script_dir}/../trackx.tar.gz" -C "$tmp_dir" .
}

check_dependencies
pre_build
build
pack
